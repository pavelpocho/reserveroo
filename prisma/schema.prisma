generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String             @id @default(uuid())
  email                String             @unique
  username             String             @unique
  firstName            String
  lastName             String
  phone                String             @unique
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @default(now()) @updatedAt
  passwordHash         String
  admin                Boolean            @default(false)
  verifiedEmail        Boolean            @default(false)
  verifyEmailTriesLeft Int                @default(3)
  reservationGroups    ReservationGroup[]
}

model Reservation {
  id                 String            @id @default(uuid())
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @default(now()) @updatedAt
  reservable         Reservable?       @relation(fields: [reservableId], references: [id], onDelete: Restrict)
  reservableId       String?
  reservationGroup   ReservationGroup? @relation(fields: [reservationGroupId], references: [id], onDelete: Cascade)
  reservationGroupId String?
  start              DateTime
  end                DateTime
  status             Int               @default(0)
  previousStatus     Int               @default(0)
  backup             Boolean           @default(false)
}

model ReservationGroup {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  note         String
  user         User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations Reservation[]
  userId       String?
}

model Reservable {
  id                     String        @id @default(uuid())
  name                   String
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @default(now()) @updatedAt
  place                  Place?        @relation(fields: [placeId], references: [id], onDelete: Cascade)
  reservations           Reservation[]
  placeId                String?
  minimumReservationTime Int           @default(30)
  reservationsPerSlot    Int           @default(1)
}

model Place {
  id           String        @id @default(uuid())
  name         String        @unique
  description  String        @default("")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  company      Company?      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  reservables  Reservable[]
  companyId    String?
  openingTimes OpeningTime[]
  tags         Tag[]
  categories   Category[]
  hidden       Boolean       @default(false)
  Location     Location?     @relation(fields: [locationId], references: [id], onDelete: Restrict)
  locationId   String?
}

model Tag {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  places      Place[]
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  places    Place[]
}

model Location {
  id          String   @id @default(uuid())
  city        String
  country     String
  places      Place[]
  cityCountry String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model OpeningTime {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  open      DateTime @db.Time()
  close     DateTime @db.Time()
  place     Place?   @relation(fields: [placeId], references: [id], onDelete: Cascade)
  placeId   String?
  day       Int

}

model Company {
  id         String            @id @default(uuid())
  name       String            @unique
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @default(now()) @updatedAt
  identities CompanyIdentity[]
  places     Place[]
}

model CompanyIdentity {
  id           String   @id @default(uuid())
  email        String   @unique
  username     String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  passwordHash String
  company      Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId    String?
}
